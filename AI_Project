


from json.encoder import INFINITY
from queue import Empty

def ReadIn(filename): #Takes an input file, and process the data into a list of number   
    f = open(filename, 'r')
    matrix = []
    for line in f:
        line = line.strip()
        nums = line.split(' ')
        if len(nums) < 3:
            continue
        for i in range(3):
            nums[i] = int(nums[i])
            matrix.append(nums[i])
    curr_state = []
    goal_state = []
    for i in range(18):
        if i<9:
            curr_state.append(matrix[i])
        else:
            goal_state.append(matrix[i])

    return curr_state, goal_state


def MDistance(curr_state, goal_state):  # find the sum of manhattan distance of the node from
    # current 
    # `1`1state to goal state
    distance = 0
    for i,item in enumerate(curr_state): 
        if item != 0:
            curr_row,curr_col = int(i/ 3) , i % 3
            goal_row,goal_col = int(goal_state.index(item) /3),goal_state.index(item) % 3
            distance += abs(curr_row-goal_row) + abs(curr_col - goal_col)
    return distance

def NScore(curr_state, goal_state):
    P = MDistance(curr_state,goal_state)
    S = 0
    Nscore = 0
    dic = {};
    count = 0;
    order = [0,1,2,5,8,7,6,3]
    for i in range(8):
        if goal_state[order[i]] == 0:
            continue;
        if i == 7:
            dic [goal_state[order[i]]] = goal_state[order[0]]
        else:
            dic [goal_state[order[i]]] = goal_state[order[i+1]]
    if curr_state[4] != goal_state[4]:
        S += 1
    while count < 8:
        if curr_state[count] == 0:
            count+=1
            continue;
        prev = curr_state[order[count]];
        if count == 7:
            last = curr_state[order[0]];
        else:
            last = curr_state[order[count+1]];
        if prev == 0:
            count+=1;
            continue
        if prev not in dic:
            print ("ptrb: ", prev)
            S+=2;
            count+=1;
            continue;
        if dic[prev] != last:
            print ("not ", prev)
            S+=2;
        count+=1
    Nscore = P + 3 * S
    return Nscore




def Asearch(h, curr_state, goal_state,goalReached=False,step_cost=1):
    state_space = [];  #This makes sure there is no repeated states.  
    totalNodes = 1
    solution = []
    po = False
    if (h == "MD"):
        hVal = MDistance(curr_state,goal_state)
    else:
        hVal = NScore(curr_state,goal_state)
    solution.append(["",curr_state,hVal])
    frontier = []
    
    while goalReached == False :
        if not curr_state in state_space:
            state_space.append(curr_state)
        blank_pos = curr_state.index(0)
        if blank_pos in [1,2,4,5,7,8]: #Check for the possibility of moving blank space to the left
            potential_state = curr_state.copy()
            potential_state[blank_pos-1],potential_state[blank_pos] = potential_state[blank_pos], potential_state[blank_pos-1]
            if potential_state not in state_space:
                if (h == "MD"):
                    hVal = MDistance(potential_state,goal_state)
                else:
                    hVal = NScore(potential_state,goal_state)
                frontier.append(['L', potential_state,hVal+step_cost])
                state_space.append(potential_state)
                po = True
                totalNodes+=1
            
        if blank_pos in [0,1,3,4,6,7]: #Check for the possibility of moving blank space to the right
            potential_state = curr_state.copy()
            potential_state[blank_pos+1],potential_state[blank_pos] = potential_state[blank_pos], potential_state[blank_pos+1]
            if potential_state not in state_space:
                if (h == "MD"):
                    hVal = MDistance(potential_state,goal_state)
                else:
                    hVal = NScore(potential_state,goal_state)

                frontier.append(['R', potential_state,hVal+step_cost])
                state_space.append(potential_state)
                po = True
                totalNodes+=1

        if blank_pos in [0,1,2,3,4,5]: #Check for the possibility of moving blank space to below
            potential_state = curr_state.copy()
            potential_state[blank_pos+3],potential_state[blank_pos] = potential_state[blank_pos], potential_state[blank_pos+3]
            if potential_state not in state_space:
                if (h == "MD"):
                    hVal = MDistance(potential_state,goal_state)
                else:
                    hVal = NScore(potential_state,goal_state)
                frontier.append(['D', potential_state,hVal+step_cost])
                state_space.append(potential_state)
                po = True
                totalNodes+=1

        if blank_pos in [3,4,5,6,7,8]: #Check for the possibility of moving blank space to above
            potential_state = curr_state.copy()
            potential_state[blank_pos-3],potential_state[blank_pos] = potential_state[blank_pos], potential_state[blank_pos-3]
            if potential_state not in state_space:
                if (h == "MD"):
                    hVal = MDistance(potential_state,goal_state)
                else:
                    hVal = NScore(potential_state,goal_state)
                frontier.append(['U', potential_state,hVal+step_cost])
                state_space.append(potential_state)
                po = True
                totalNodes+=1

        if(po == False):
            if curr_state in solution:
                solution.remove(curr_state)
            step_cost -= 1
           
        min_fVal = INFINITY
        for item in frontier:           #the state with minimum f value becomes current state
            
            if item[2] <= min_fVal:
                min_fVal = item[2]
                node = item             #store the node with smallest f value
        #print (frontier)      
            
        curr_state = node[1]
                #print("NODE",node,"\n")
        frontier.remove(node)
        solution.append(node)

        step_cost+=1       
        if(curr_state == goal_state):   #stop the loop if goal is reached
            goalReached = True
        
    #print(solution,"\n")   
    return totalNodes,solution          


def format (curr_state, goal_state, filename, hfunc):
    filename = open(filename,"w");
    for i in range(len(curr_state)):
        if (i % 3 == 0):
            print('\t', file = filename)
        print(curr_state[i], end=" ", file = filename)

    print('\t', file = filename)

    for i in range(len(goal_state)):
        if (i % 3 == 0):
            print('\t', file = filename)
        print(goal_state[i], end=" ", file = filename)    

    frontier, solution = Asearch(hfunc,curr_state,goal_state)

    print('\n' , file = filename)
    print(len(solution), file = filename)
    print(frontier, file = filename)
    for item in (solution):
        print(item[0],end=" ", file = filename)
    print("\t", file = filename)
    for item in (solution):
        print(item[-1],end=" ", file = filename)
def main():
    #curr_state = [2,0,6,1,3,7,4,5,8]
    #goal_state = [1,2,0,7,5,3,4,8,6]
    
    #curr_state, goal_state = ReadIn("Input1.txt")
    #format (curr_state, goal_state, "output1h1.txt" , "MD")
    #format (curr_state, goal_state, "output1h2.txt" , "h2")
    curr_state, goal_state = ReadIn("Input2.txt")
    format (curr_state, goal_state, "output2h1.txt" , "MD")
    #format (curr_state, goal_state, "output2h2.txt" , "h2")
    #curr_state, goal_state = ReadIn("Input3.txt")
    #format (curr_state, goal_state, "output3h1.txt" , "MD")
    #format (curr_state, goal_state, "output3h2.txt" , "h2")
    # get file
    # get initial state and goal state using readState
    #print(MDistance(curr_state,goal_state))              
    #output = open("fname","w");

    # output:
    # initial state
    # goal state
    # depth level d len(solutions)
    # total of nodes generated  len(frontier)
    # solution  solutions[0]
    # f(n) value    solutions[2]


main()
